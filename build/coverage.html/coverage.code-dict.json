{"/home/travis/build/npmtest/node-npmtest-metasync/test.js":"/* istanbul instrument in package npmtest_metasync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-metasync/lib.npmtest_metasync.js":"/* istanbul instrument in package npmtest_metasync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_metasync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_metasync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-metasync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-metasync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_metasync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_metasync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_metasync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_metasync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_metasync.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_metasync.__dirname + '/lib.npmtest_metasync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/metasync.js":"'use strict';\n\nconst api = {};\napi.metasync = {};\napi.common = require('metarhia-common');\napi.util = require('util');\n\nmodule.exports = api.metasync;\n\nconst submodules = [\n  'utils', // Basic utilities\n  'flow', // Flow control\n  'array', // Array utilities\n  'chain', // Process arrays sync and async array in chain\n  'collectors', // DataCollector and KeyCollector\n  'queue', // Concurrency\n  'throttle' // Throttling\n];\n\nsubmodules\n  .map(path => './lib/' + path)\n  .map(require)\n  .map(exports => exports(api));\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/utils.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  api.metasync.cb = (\n    // Wrap callback\n    callback // function (optional)\n  ) => {\n    let done = false;\n    const wrap = (...args) => {\n      if (done) return;\n      done = true;\n      callback(...args);\n    };\n    return callback ? wrap : api.common.falseness;\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/flow.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  api.metasync.composition = (\n    // Functional Asynchronous Composition\n    fns, // array of function([data,] callback)\n    // data - incoming data\n    // callback(data)\n    //   data - outgoing data\n    done, // callback(data)\n    // data - hash with of functions results\n    data // incoming data\n  ) => {\n    if (fns.length === 1) api.metasync.parallel(fns[0], done, data);\n    else api.metasync.sequential(fns, done, data);\n  };\n\n  api.metasync.parallel = (\n    // Parallel execution\n    fns, // array of function([data,] callback)\n    // data - incoming data\n    // callback - function(data)\n    //   data - outgoing data\n    done, // on done callback(data)\n    // data - hash with of functions results\n    data = {} // incoming data\n  ) => {\n    const len = fns.length;\n    let counter = 0;\n    let finished = false;\n    done = api.metasync.cb(done);\n\n    if (len < 1) return done(data);\n    fns.forEach((fn) => {\n      const finish = (result) => {\n        if (fn.name && result) data[fn.name] = result;\n        if (result instanceof Error) {\n          if (!finished) done(result);\n          finished = true;\n        } else if (++counter >= len) {\n          done(data);\n        }\n      };\n      // fn may be array of function\n      if (Array.isArray(fn)) api.metasync.composition(fn, finish, data);\n      else if (fn.length === 2) fn(data, finish);\n      else fn(finish);\n    });\n  };\n\n  api.metasync.sequential = (\n    // Sequential execution\n    fns, // array of function([data,] callback)\n    // data - incoming data\n    // callback - function(data)\n    //   data - outgoing data\n    done, // on done callback(data)\n    // data - hash with of functions results\n    data = {} // incoming data\n  ) => {\n    let i = -1;\n    const len = fns.length;\n    done = api.metasync.cb(done);\n\n    function next() {\n      let fn = null;\n      const finish = (result) => {\n        if (fn.name && result) data[fn.name] = result;\n        if (result instanceof Error) return done(result);\n        next();\n      };\n      if (++i >= len) return done(data);\n      fn = fns[i];\n      if (Array.isArray(fn)) api.metasync.composition(fn, finish, data);\n      else if (fn.length === 2) fn(data, finish);\n      else fn(finish);\n    }\n\n    if (len > 0) next();\n    else done(data);\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/array.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  api.metasync.map = (\n    // Asynchronous map (iterate parallel)\n    items, // incoming array\n    fn, // function(current, callback)\n    // to be executed for each value in the array\n    //   current - current element being processed in the array\n    //   callback - function(err, accepted)\n    //     err - error or null\n    //     value - mapped item\n    done // optional on done callback function(err, result)\n    //   err - error or null\n    //   result - array result\n  ) => {\n    const len = items.length;\n    const result = new Array(len);\n    let errored = false;\n    let count = 0;\n    done = api.metasync.cb(done);\n\n    items.forEach((item, index) => {\n      fn(item, (err, value) => {\n        if (errored) return;\n        if (err) {\n          errored = true;\n          return done(err);\n        }\n        result[index] = value;\n        count++;\n        if (count === len) done(null, result);\n      });\n    });\n  };\n\n  api.metasync.filter = (\n    // Asynchrous filter (iterate parallel)\n    items, // incoming array\n    fn, // function(value, callback)\n    // to be executed for each value in the array\n    //   value - item from items array\n    //   callback - function(err, accepted)\n    //     err - error or null\n    //     accepted - filtering result true/false\n    done // optional on done callback function(err, result)\n    //   err - error or null\n    //   result - array result\n  ) => {\n    const len = items.length;\n    let result = [];\n    let count = 0;\n    let errored = false;\n    done = api.metasync.cb(done);\n\n    function finish() {\n      // Callbacks might be called in any possible order,\n      // hence sort the filtered array\n      // by element's index in the original itemsection\n      result.sort((x, y) => (x.index - y.index));\n\n      // Only value is needed in resulting array\n      result = result.map(x => x.value);\n\n      // Return a result using callback;\n      done(null, result);\n    }\n\n    items.forEach((value, index) => {\n      fn(value, (err, accepted) => {\n        if (errored) return;\n        if (err) {\n          errored = true;\n          return done(err);\n        }\n        if (accepted) result.push({ index, value });\n        count++;\n        if (count === len) finish();\n      });\n    });\n  };\n\n  api.metasync.reduce = (\n    // Asynchronous reduce\n    items, //   items - incoming array\n    callback, // callback - function to be executed for each value in array\n    //     previous - value previously returned in the last iteration\n    //     current - current element being processed in the array\n    //     callback - callback for returning value back to function reduce\n    //     counter - index of the current element being processed in array\n    //     items - the array reduce was called upon\n    done, // optional on done callback function(err, result)\n    //   err - error or null\n    //   result - array result\n    initial // optional value to be used as first arpument in first iteration\n  ) => {\n    const len = items.length;\n    let count = typeof(initial) === 'undefined' ? 1 : 0;\n    let previous = count === 1 ? items[0] : initial;\n    let current = items[count];\n    done = api.metasync.cb(done);\n\n    function response(err, data) {\n      if (err) return done(err);\n      if (count === len - 1) return done(null, data);\n      count++;\n      previous = data;\n      current = items[count];\n      callback(previous, current, response, count, items);\n    }\n\n    callback(previous, current, response, count, items);\n  };\n\n  api.metasync.each = (\n    // Asynchronous each (iterate in parallel)\n    items, // incoming array\n    fn, // function(value, callback)\n    // value - item from items array\n    // callback - callback function(accepted)\n    //   err - instance of Error or null\n    done // optional on done callback function(err)\n    //   err - error or null\n  ) => {\n    const len = items.length;\n    let count = 0;\n    let finished = false;\n    done = api.metasync.cb(done);\n\n    if (len < 1) return done();\n    items.forEach((item) => {\n      fn(item, (err) => {\n        if (err instanceof Error) {\n          if (!finished) done(err);\n          finished = true;\n        } else {\n          count++;\n          if (count >= len) done();\n        }\n      });\n    });\n  };\n\n  api.metasync.series = (\n    // Asynchronous series\n    items, // incoming array\n    fn, // function(value, callback)\n    // value - item from items array\n    // callback - callback function(accepted)\n    //   err - instance of Error or null\n    done // optional on done callback function(err)\n    //   err - error or null\n  ) => {\n    const len = items.length;\n    let i = -1;\n    done = api.metasync.cb(done);\n\n    function next() {\n      i++;\n      if (i >= len) return done();\n      fn(items[i], (err) => {\n        if (err instanceof Error) return done(err);\n        setImmediate(next);\n      });\n    }\n\n    next();\n  };\n\n  api.metasync.find = (\n    // Asynchronous find (iterate in series)\n    items, // incoming array\n    fn, // function(value, callback)\n    //   value - item from items array\n    //   callback - function(err, accepted)\n    //     err - error or null\n    //     accepted - true/false returned from fn\n    done // optional on done callback function(err, result)\n    //   err - error or null\n    //   result - array result\n  ) => {\n    const len = items.length;\n    let i = 0;\n    done = api.metasync.cb(done);\n\n    function next() {\n      if (i === len) return done();\n      fn(items[i], (err, accepted) => {\n        if (err) return done(err);\n        if (accepted) return done(items[i]);\n        i++;\n        next();\n      });\n    }\n\n    if (len > 0) next();\n    else done();\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/chain.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  const async = op => {\n    switch (op) {\n      case 'map': return api.metasync.map;\n      case 'filter': return api.metasync.filter;\n      case 'reduce': return api.metasync.reduce;\n      case 'each': return api.metasync.each;\n      case 'series': return api.metasync.series;\n      case 'find': return api.metasync.find;\n    }\n  };\n\n  function ArrayChain(array) {\n    this.array = array;\n    this.chain = [];\n  }\n\n  ArrayChain.prototype.execute = function(err) {\n    const item = this.chain.shift() || {};\n\n    if (!item.op) {\n      if (err) throw err;\n      else return;\n    }\n\n    const next = (err, data) => {\n      this.array = data;\n      this.execute(err);\n    };\n\n    if (item.op === 'fetch') {\n      return item.fn(err, this.array, next);\n    }\n\n    if (err) return this.execute(err);\n\n    const op = async(item.op);\n    op(this.array, item.fn, next);\n  };\n\n  ArrayChain.prototype.fetch = function(fn) {\n    this.chain.push({ op: 'fetch', fn });\n    this.execute();\n    return this;\n  };\n\n  ArrayChain.prototype.map = function(fn) {\n    this.chain.push({ op: 'map', fn });\n    return this;\n  };\n\n  ArrayChain.prototype.filter = function(fn) {\n    this.chain.push({ op: 'filter', fn });\n    return this;\n  };\n\n  ArrayChain.prototype.reduce = function(fn) {\n    this.chain.push({ op: 'reduce', fn });\n    return this;\n  };\n\n  ArrayChain.prototype.each = function(fn) {\n    this.chain.push({ op: 'each', fn });\n    return this;\n  };\n\n  ArrayChain.prototype.series = function(fn) {\n    this.chain.push({ op: 'series', fn });\n    return this;\n  };\n\n  ArrayChain.prototype.find = function(fn) {\n    this.chain.push({ op: 'find', fn });\n    return this;\n  };\n\n  api.metasync.for = (\n    // Create an ArrayChain instance\n    array // start mutations from this data\n  ) => (\n    new ArrayChain(array)\n  );\n\n};\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/collectors.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  function Collector() {}\n\n  Collector.prototype.on = function(\n    // Collector events:\n    eventName,\n    callback\n    // on('error', function(err, key))\n    // on('timeout', function(err, data))\n    // on('done', function(errs, data))\n    //   errs - hash of errors\n    //   data - hash of sucessfully received adta\n  ) {\n    if (eventName in this.events) {\n      this.events[eventName] = callback;\n    }\n  };\n\n  Collector.prototype.emit = function(\n    // Emit Collector events\n    eventName, err, data\n  ) {\n    const event = this.events[eventName];\n    if (event) event(err, data);\n  };\n\n  api.metasync.DataCollector = function(\n    expected, // number of collect() calls expected\n    timeout // collect timeout (optional)\n  ) {\n    this.expected = expected;\n    this.timeout = timeout;\n    this.count = 0;\n    this.data = {};\n    this.errs = [];\n    this.events = {\n      error: null,\n      timeout: null,\n      done: null\n    };\n    const collector = this;\n    if (this.timeout) {\n      this.timer = setTimeout(() => {\n        const err = new Error('DataCollector timeout');\n        collector.emit('timeout', err, collector.data);\n      }, timeout);\n    }\n  };\n\n  api.util.inherits(api.metasync.DataCollector, Collector);\n\n  api.metasync.DataCollector.prototype.collect = function(\n    // Push data to collector\n    key, // key in result data\n    data // value or error instance\n  ) {\n    this.count++;\n    if (data instanceof Error) {\n      this.errs[key] = data;\n      this.emit('error', data, key);\n    } else {\n      this.data[key] = data;\n    }\n    if (this.expected === this.count) {\n      if (this.timer) clearTimeout(this.timer);\n      const errs = this.errs.length ? this.errs : null;\n      this.emit('done', errs, this.data);\n    }\n  };\n\n  api.metasync.KeyCollector = function(\n    // Key Collector\n    keys, // array of keys, example: ['config', 'users', 'cities']\n    timeout // collect timeout (optional)\n  ) {\n    this.isDone = false;\n    this.keys = keys;\n    this.expected = keys.length;\n    this.count = 0;\n    this.timeout = timeout;\n    this.data = {};\n    this.errs = [];\n    this.events = {\n      error: null,\n      timeout: null,\n      done: null\n    };\n    const collector = this;\n    if (this.timeout) {\n      this.timer = setTimeout(() => {\n        const err = new Error('KeyCollector timeout');\n        collector.emit('timeout', err, collector.data);\n      }, timeout);\n    }\n  };\n\n  api.util.inherits(api.metasync.KeyCollector, Collector);\n\n  api.metasync.KeyCollector.prototype.collect = function(\n    key, data\n  ) {\n    if (this.keys.includes(key)) {\n      this.count++;\n      if (data instanceof Error) {\n        this.errs[key] = data;\n        this.emit('error', data, key);\n      } else {\n        this.data[key] = data;\n      }\n      if (this.expected === this.count) {\n        if (this.timer) clearTimeout(this.timer);\n        const errs = this.errs.length ? this.errs : null;\n        this.emit('done', errs, this.data);\n      }\n    }\n  };\n\n  api.metasync.KeyCollector.prototype.stop = function() {\n  };\n\n  api.metasync.KeyCollector.prototype.pause = function() {\n  };\n\n  api.metasync.KeyCollector.prototype.resume = function() {\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/queue.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  api.metasync.ConcurrentQueue = function(\n    // ConcurrentQueue\n    concurrency, // number of simultaneous and asynchronously executing tasks\n    timeout // process timeout (optional), for single item\n  ) {\n    this.isOnPause = false;\n    this.concurrency = concurrency;\n    this.timeout = timeout;\n    this.count = 0;\n    this.items = [];\n    this.events = {\n      error: null,\n      timeout: null,\n      empty: null,\n      process: null\n    };\n  };\n\n  api.metasync.ConcurrentQueue.prototype.add = function(\n    item // add item to queue\n  ) {\n    if (!this.isOnPause) {\n      if (this.count < this.concurrency) this.next(item);\n      else this.items.push(item);\n    }\n  };\n\n  api.metasync.ConcurrentQueue.prototype.next = function(\n    item // process next item from queue\n  ) {\n    const queue = this;\n    let timer;\n    if (queue.isOnPause) return;\n    queue.count++;\n    if (queue.timeout) {\n      timer = setTimeout(() => {\n        const err = new Error('ConcurrentQueue timed out');\n        queue.emit('timeout', err);\n      }, queue.timeout);\n    }\n    const stub = (item, callback) => callback();\n    const fn = queue.events.process || stub;\n    fn(item, () => {\n      queue.count--;\n      if (queue.timeout) clearTimeout(timer);\n      if (queue.items.length > 0) {\n        const item = queue.items.shift();\n        queue.next(item);\n      } else if (queue.count === 0) {\n        queue.emit('empty');\n      }\n    });\n  };\n\n  api.metasync.ConcurrentQueue.prototype.on = function(\n    // ConcurrentQueue events:\n    eventName,\n    fn\n    // on('error', function(err))\n    // on('empty', function()) - no more items in queue\n    // on('process', function(item, callback)) - process item function\n    // on('timeout', function(err, data))\n  ) {\n    if (!this.isOnPause && eventName in this.events) {\n      this.events[eventName] = fn;\n    }\n  };\n\n  api.metasync.ConcurrentQueue.prototype.emit = function(\n    eventName, // event name\n    err, // instance of Error\n    data // attached data\n  ) {\n    if (!this.isOnPause) {\n      const event = this.events[eventName];\n      if (event) event(err, data);\n    }\n  };\n\n  api.metasync.ConcurrentQueue.prototype.pause = function() {\n    this.isOnPause = true;\n  };\n\n  api.metasync.ConcurrentQueue.prototype.resume = function() {\n    this.isOnPause = false;\n  };\n\n  api.metasync.ConcurrentQueue.prototype.stop = function() {\n    this.isOnPause = false;\n    this.concurrency = null;\n    this.timeout = null;\n    this.count = 0;\n    this.items = [];\n    this.events = {\n      error: null,\n      timeout: null,\n      empty: null,\n      process: null\n    };\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-metasync/node_modules/metasync/lib/throttle.js":"'use strict';\n\nmodule.exports = (api) => {\n\n  api.metasync.throttle = (\n    // Function throttling\n    timeout, // time interval\n    fn, // function to be executed once per timeout\n    args // arguments array for fn (optional)\n  ) => {\n    let timer = null;\n    let wait = false;\n    return function throttled() {\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          if (wait) throttled();\n        }, timeout);\n        if (args) fn(...args);\n        else fn();\n        wait = false;\n      } else {\n        wait = true;\n      }\n    };\n  };\n\n  api.metasync.timeout = (\n    // Set timeout for function execution\n    timeout, // time interval\n    asyncFunction, // async function to be executed\n    // done - callback function\n    done // callback function on done\n  ) => {\n    let finished = false;\n    done = api.metasync.cb(done);\n\n    const timer = setTimeout(() => {\n      if (!finished) {\n        finished = true;\n        done();\n      }\n    }, timeout);\n\n    asyncFunction(() => {\n      if (!finished) {\n        clearTimeout(timer);\n        finished = true;\n        done();\n      }\n    });\n  };\n\n};\n"}